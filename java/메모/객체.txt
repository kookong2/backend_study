객체란?
	- 국어사전에서는 '의사나 행위가 미치는 대상'
	- 자바 객체 지향 프로그래밍은 객체를 기반으로 하는 프로그램

객체 지향 프로그래밍
	- 객체를 정의하고, 객체 간 협력을 프로그래밍 하는 것
	- 먼저 객체를 만들고 객체 사이에 일어나는 일을 구현
	
클래스
	- 객체의 속성과 기능을 코드로 구현한 것
	- 객체를 클래스로 구현하는 것을 '클래스를 정의한다' 라고 한다.
	- 클래스를 정의하려면 클래스의 이름과 클래스가 가지는 속성 또는 특성이 필요

	- (접근 제어자) class 클래스 이름{
		멤버변수;
		메서드;
	   }
	- 클래스 이름 앞에 있는 public 예약어는 접근 제어자라고 한다.
	
	- 클래스를 만들 때는 class 예약어를 사용
	- {} 안에는 클래스의 내용을 구현
	- 변수를 선언할 때는 각 변수의 속성에 맞는 자료형을 사용
	- 자바 프로그램은 모든 요소가 클래스 내부에 있어야 함
	- 클래스 외부에는 package 선언과 import 문장 외에 아무것도 선언하지 않는다.

클래스 이름을 짓는 규칙
	- 클래스 이름은 대문자로 시작 (파스칼 케이스)
	- 소문자로 시작한다고 해서 오류가 발생하는 것은 아니나, 개발자들 사이에서 관습처럼 사용

멤버 변수
	- 클래스에 선언하여 객체 속성을 나타내는 변수
	- 속성(property)나 특성(attribute) 등으로 표현하기도 함
	- 속성이 무엇이냐에 따라 알맞는 자료형을 선언해야 함

메서드(method)
	- 함수의 한 종류
	- 클래스 내부에서 멤버 변수를 사용하여 클래스의 기능을 구현한 것
	- 이름 지을 때 첫 단어를 제외 단어의 시작문자는 대문자 (카멜 케이스)
	
함수 정의하기
	- int(함수 반환형) add(함수이름) (int num1, int num2)(매개변수) {
		int result;
		result = num1 + num2;
		return(return 예약어) result;
	}


	return 예약어와 반환형
		- add() 함수를 수행한 후 결과 값은 변수 result에 저장
		- return 예약어를 사용하여 result 값을 반환
		- 경우에 따라 반환값이 없는 함수도 있음
			-> 함수 반환형에 void라고 쓴다


패키지란?
	- 클래스 파일의 묶음
	- 패키지를 만들면 프로젝트 하위에 물리적으로 디렉토리가 생성
	- 패키지는 계층구조를 가지고 있다.
	- 패키지가 단순히 클래스 묶음이 아닌 프로젝트 전체 소스 코드를 구성하는 계층 구조가 되고,
		이 계층구조를 잘 구성해야 소스 코드 관리와 유지보수가 편리

프로그램을 시작하는 main()함수
	- 자바 가상 머신(Java Virtual Machine:JVM)이 프로그램을 시작하기 위해 호출하는 함수
	- 클래스 내부에 만들지만, 클래스의 메서드는 아님

new 예약어로 클래스 생성하기
	ex) 클래스형 변수이름 = new 생성자;
	    Person person = new Person();

	- 클래스를 생성할 때는 new예약어를 사용하고 이어서 생성자를 써준다
	- 클래스 자료형 변수에 변수를 선언하고 new 예약어로 생성자를 호출하여 대입하면
		새로운 클래스가 생성
	- 클래스가 생성된다는 것은 클래스를 사용할 수 있도록 메모리 공간을 할당 받는다는 뜻
	
	- 인스턴스
		- 실제로 사용할 수 있도록 생성된 클래스
		- 클래스는 하나지만, 이 클래스로 여러 개의 각기 다른 인스턴스를 생성 가능
	
	- 참조변수
		- 힙 메모리에 생성된 인스턴스를 가리키는 클래스형 변수
		- 참조변수를 사용하면 인스턴스의 멤버변수와 메서드를 참조하여 사용할 수 있는데
			이때 마침표(.)연산자를 사용

생성자
	- 클래스를 생성할 때 사용하는 Person()과 같은 함수를 생성자라고 함
	- 생성자가 하는 역할은 인스턴스의 생성과 인스턴스를 생성할 때 멤버 변수나 상수를 초기화 하는 역할
		
	- 디폴트 생성자
		- 생성자는 클래스를 생성할 때만 호출
		- 생성자 이름은 클래스 이름과 같음
		- 생성자는 반환 값이 없음
		- 생성자가 없는 클래스는 클래스 파일을 컴파일 할 때 자바 컴파일러에서 자동으로
			생성자를 만들어 줌
		- 디폴트 생성자는 매개변수가 없고 구현 코드도 없음

	- 생성자 오버로드
		- 클래스에서 생성자가 두개 이상 제공되는 경우를 생성자 오버로드라고 한다.
		- 필요에 따라 매개변수가 다른 생성자를 여러 개를 만들 수 있다.
		- 클래스에 생성자를 여러 개 제공하면 이 클래스를 사용하는 코드에서는 원하는
			생성자를 선택해 사용할 수 있음
		- 경우에 따라서는 클래스에서 일부러 디폴트 생성자를 제공하지 않기도 함

힙 메모리
	- 힙(heap)은 프로그램에서 사용되는 동적 메모리(dynamic memory) 공간을 말함.
	- 일반적으로 프로그램은 스택, 힙, 데이터 이렇게 세 영역을 사용해야 하는데,
		객체가 생성될 때 사용하는 공간이 힙이다.
	- 힙은 동적으로 할당되며 사용이 끝나면 메모리를 해제해야 함
		-> 자바에서는 가비지 콜렉서(garbage collector)가 자동으로 메모리를 해제

접근제어자 정리
	- public : 외부 클래스 어디에서나 접근할 수 있다.
	- protected : 같은 패키지 내부와 상속 관계의 클래스에서만 접근할 수 있고
			그 외 클래스에서는 접근할 수 없습니다.
	- 아무것도 없는 경우 : default이며 같은 패키지 내부에서만 접근할 수 있다.
	- private : 같은 클래스 내부에서만 접근할 수 있다.

get(), set() 메서드	
	- private으로 선언한 변수를 외부 코드에서 사용하려면 public 메서드를 제공해야 한다.
	- public 메서드가 제공되지 않는다면 변수에 접근할 수 있는 방법은 없다.
	- 이때 사용하는 것이 get(), set() 메서드

this 예약어
	- this는 생성된 인스턴스 스스로를 가리키는 예약어
	- 














