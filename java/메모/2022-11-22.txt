day09
상속

class 하위 클래스 extends 상위클래스{
	
}

super : 지역변수 : 생성된 상위 객체의 주소
super() : 생성자 : 상위 클래스의 생성자 메서드

C c = new C();

생성자 메서드 호출 순서
C() -> B() -> A()

객체 생성 순서
A -> B -> C

instanceof

배열
자료형[] 배열명 = new 자료형[공간의 갯수];
자료형[] 배열명 = {값1, 값2, 값3};
-> 동일 자료형

메서드 재정의 - 상위 클래의 동일한 메서드

어노테이션 : Annotation - 주석, 주해, 기능(x)
@Override
	- 재정의가 맞는지 체크 : 상위 클래스에 정의된 메서드인지?
	- 컴파일러 -> 재정의 메서드(정보 전달)

1. 추상 클래스
	추상적 - 정해지지 않은 <-- --> 구체적 - 정해진

	class 클래스 {
		변수 

		메서드 : 구체적
	}
	메서드의 구현체가 없다.

	메서드가 정의 되지 않은 클래스
	
	공통적인 기능 - 하위 클래스 공통 멤버 

	abstract class{
	
	}

추상 클래스는 추상 메서드 (구현체가 없는 메서드)
	-> 객체 생성 x but 상속 후 생성 가능

추상 클래스의 추상 메서드는 -> 하위 클래스에서 반드시 구현
	따라야 할 규칙, 가이드라인

2. 추상 클래스와 다형성
	- 하위 클래스 객체 메모리의 일부분
	
3. final 예약어
	- 변수 -> 상수로 만드는 역할
	- 메서드 -> 재정의 불가능 하는 역할
	- 클래스 -> 상속 불가능 하는 역할

4. 인터페이스 
	- 추상메서드로만 구성
	- 규칙, 규약, 가이드라인, 설계

5. 클래스에서 인터페이스 구현하기
클래스명 implements 인터페이스명{

}

6. 인터페이스의 요소 살펴보기
- 인터페이스 상수
	- 인터페이스는 자체 객체 생성 x
	- 외부 접근 가능한 정적 상수(public static final)
- 디폴트 메서드
	- 인스턴스 메서드 : 하위클래스에서만 사용 가능
- 정적 메서드
	- 객체 생성 x, 인터페이스 명 호출

7. 인터페이스 상속
- 인터페이스간 상속 (extends)

8. 내부 클래스
: 클래스 내부에 있는 클래스
- 인스턴스 내부 클래스 
	instance - 실체 : 생성된 객체 - 객체 
- 정적 내부 클래스 ( 정적 변수, 정적 메서드와 비슷)
	static -> 일반 클래스와 큰 차이가 없음
- 지역 내부 클래스 (중요!)
	메서드(함수)
		- 추상 클래스
		- 인터페이스

	(중요!!)	- 추상클래스, 인터페이스 객체를 생성할 수 있는 조건?
			- 특정 환경(지역 내부, 멤버 변수)
			- 미구현된 메서드를 구현함으로써
			Runnable








	