day09
상속
	- 상속을 구현할 때 extends 예약어 사용
	- extends 예약어는 연장, 확장하기를 의미

	class 하위 클래스 extends 상위클래스{
	
	}

protected 예약어
	- 상위 클래스에 작성한 변수나 메서드 중 외부 클래스에서 사용할 수 없지만 하위 클래스에서 사용할 수
		있도록 지정하는 예약어
	- protected는 상속된 하위 클래스를 제외한 나머지 외부 클래스에서는 private과 동일한 역할을 한다./

상속에서 클래스 생성과 형 변환
	- 하위 클래스가 생성될 떄는 상위 클래스의 생성자가 먼저 호출된다.

	- 상위 클래스의 생성자가 호출될 때 상위 클래스의 멤버 변수가 메모리에 생성
		-> 하위 클래스에서도 상위 클래스의 변수를 사용할 수 있게 되는 것

	- 모든 하위 클래스는 상위 클래스 자료형으로 형변환 될 수 있지만 그 역은 성립하지 않음
		-> 하위 클래스를 상위 클래스 자료형으로 형변환 하는 것을 묵시적 형변환이라 함
			ex) 상위클래스() 변수명 = new 하위클래스()

super 예약어
	- 하위 클래스에서 상위 클래스로 접근할 때 사용
	- 생성된 상위 객체의 주소를 가지고 있음
	- 상위 클래스의 생성자를 호출하는 데 사용
	- 상위 클래스에 선언된 멤버 변수나 메서드를 하위 클래스에서 참조할 때도 super 사용
	- 하위 클래스가 상위 클래스와 동일한 이름의 메서드를 구현하는 경우 하위 클래스에서
		동일한 이름의 상위 클래스 메서드를 가리킬 때 super 사용

super() 생성자
	- 하위 클래스가 생성될 때는 상위 클래스의 디폴트 생성자를 호출하는 super()가 자동으로 생성 
	- super()를 통해 상위 클래스 생성자를 호출하고, 코드 순서대로 멤버 변수가 초기화

메서드 오바라이딩(재정의)
	- 상위 클래스에 정의한 메서드가 하위 클래스에서 구현 할 내용과 맞지 않을 경우 하위
		클래스에서 이 메서드를 재정의 할 수 있다.

	- 오버라이딩을 하려면 반환형, 메서드 이름, 매개 변수, 매개변수 자료형이 반드시 같아야 한다.

가상 메서드
	- 상위 클래스와 하위 클래스에 같은 이름의 메서드가 존재할 때 호출되는 메서드는
		인스턴스에 따라 결정

	- 묵시적 형변환과 메서드 재정의로 인해 선언한 클래스 형이 아닌 생성된 인스턴스의 메서드를 호출하는
		것을 가상 메서드라고 한다.


가상 메서드의 원리
	- 일반적으로 프로그램에서 메서드를 호출한다는 것은 그 메서드의 명령 집합이 있는 메모리 위치를 참조
		하여 명령을 실행하는 것
	
	- 가상메서드의 경우 가상 메서드 테이블이 만들어짐

	- 가상메서드 테이블은 각 메서드 이름과 실제 메모리 주소가 짝을 이루고 있음

	- 어떤 메서드가 호출되면 이 테이블에서 주소 값을 찾아서 해당 메서드의 명령을 수행

다운 캐스팅
	- 상위 클래스로 형 변환 되었던 하위 클래스를 다시 원해 자료형으로 형 변한 하는 것


어노테이션 : Annotation - 주석, 주해, 기능(x)
	@Override
		- 재정의가 맞는지 체크 : 상위 클래스에 정의된 메서드인지?
		- 컴파일러 -> 재정의 메서드(정보 전달)
	@FunctionalInterface
		- 함수형 인터페이스라는 정보 제공
	@Deprecated
		- 이후 버전에서 사용되지 않을 수 있는 변수, 메서드에 사용
	@SupperessWarnings
		- 특정 경고가 나타나지 않도록 함

1. 추상 클래스
	추상적 - 정해지지 않은 <-- --> 구체적 - 정해진

	class 클래스 {
		변수 

		메서드 : 구체적
	}
	메서드의 구현체가 없다.

	메서드가 정의 되지 않은 클래스
	
	공통적인 기능 - 하위 클래스 공통 멤버 

	abstract class{
	
	}

추상 클래스는 추상 메서드 (구현체가 없는 메서드)
	-> 객체 생성 x but 상속 후 생성 가능

추상 클래스의 추상 메서드는 -> 하위 클래스에서 반드시 구현
	따라야 할 규칙, 가이드라인

2. 추상 클래스와 다형성
	- 하위 클래스 객체 메모리의 일부분
	
3. final 예약어
	- 변수 -> 상수로 만드는 역할
	- 메서드 -> 재정의 불가능 하는 역할
	- 클래스 -> 상속 불가능 하는 역할

4. 인터페이스 
	- 추상메서드로만 구성
	- 규칙, 규약, 가이드라인, 설계

5. 클래스에서 인터페이스 구현하기
클래스명 implements 인터페이스명{

}

6. 인터페이스의 요소 살펴보기
- 인터페이스 상수
	- 인터페이스는 자체 객체 생성 x
	- 외부 접근 가능한 정적 상수(public static final)
- 디폴트 메서드
	- 인스턴스 메서드 : 하위클래스에서만 사용 가능
- 정적 메서드
	- 객체 생성 x, 인터페이스 명 호출

7. 인터페이스 상속
- 인터페이스간 상속 (extends)

8. 내부 클래스
: 클래스 내부에 있는 클래스
- 인스턴스 내부 클래스 
	instance - 실체 : 생성된 객체 - 객체 
- 정적 내부 클래스 ( 정적 변수, 정적 메서드와 비슷)
	static -> 일반 클래스와 큰 차이가 없음
- 지역 내부 클래스 (중요!)
	메서드(함수)
		- 추상 클래스
		- 인터페이스

	(중요!!)	- 추상클래스, 인터페이스 객체를 생성할 수 있는 조건?
			- 특정 환경(지역 내부, 멤버 변수)
			- 미구현된 메서드를 구현함으로써
			Runnable








	