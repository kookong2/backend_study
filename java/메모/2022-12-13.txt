람다식(Lamda expression)
	- 함수형 프로그래밍
		- 함수란? 하나의 독립적인 프로그램
		- 함수는 값
			- 매개변수로 함수를 값으로 사용이 가능
			- 반환값으로 함수를 값으로 사용 가능
		- 자바스크립트		

1. 람다식이란?
	- 메서드 -> 하나의 식으로 구성

2. 람다식 문법 살펴보기
	
3. 람다식 사용하기
	1) 람다식 구현 방법
	
	2) 함수형 인터페이스(Functional Interface)
		- 1개의 추상 메서드
		- default 메서드, static은 제한 없이 사용 가능

	3) 함수형 인터페이스 타입의 매개변수와 반환 타입
	
	- java.util.function 패키지
		1) 매개 변수가 없고, 반환값이 있는 변수
			- Supplier<T>
				: T get()
 
		2) 매개 변수 1개가 있고, 반환값이 없는 변수
			- Consumer<T>
				: void accept(T s)

		3) 매개 변수가 1개 있고, 반환값이 1개 있는 변수
			- Function<T, R>
				: R apply(T t)

		4) 매개 변수는 1개 있고, 반환값은 boolean으로 고정된 함수
			- Predicate<T>
				: boolean test(T t)
	

		- Bi로 시작하는 인터페이스는 매개 변수가 2개
			1) BiConsumer<T,U>
				- void accept(T t, U u);

			2) BiFunction<T,U,R>
				- R apply(T t, U u)

			3) BiPredicate<T,U>
				- boolean test(T t,U u)

		- 매개 변수, 반환값이 같은 자료형일 경우	(많이 쓰임)
			1) UnaryOperator<T> : Function<T,T>
				- T apply(T t)
	
			2) BinaryOperator<T> : BiFunction<T,T,T>
				- T apply(T t, T t)

4. Function의 합성과 Predicate의 결합

5. 메서드 참조